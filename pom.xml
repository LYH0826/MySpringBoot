<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>HelloSpringBoot</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <!--
    ● 无需关注版本号，自动版本仲裁
        1、引入依赖默认都可以不写版本
        2、引入非版本仲裁的jar，要写版本号。
    ● 可以修改默认版本号
        1、查看spring-boot-dependencies里面规定当前依赖的版本用的 key。
        2、在当前项目里面重写配置

    注：Maven的就近原则，在pom中修改之后，先按照pom中的版本号，
        否则遵循父类中的版本。
    -->
    <properties>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
        <mysql.version>5.1.37</mysql.version>
    </properties>


    <!--
    ● 父项目做依赖管理
        父项目一般就是来做依赖管理的
        几乎声明了所有开发中常用的依赖的版本号、自动版本仲裁机制

    ● 自动配置
        1、自动配好Tomcat
            引入Tomcat依赖;
            配置Tomcat;
        2、自动配好SpringMVC
            引入SpringMVC全套组件;
            自动配好SpringMVC常用组件（功能）;
        3、自动配好Web常见功能，如：字符编码问题
            SpringBoot帮我们配置好了所有web开发的常见场景
        4、各种配置拥有默认值
            默认配置最终都是映射到某个类上，如：MultipartProperties;
            配置文件的值最终会绑定某个类上，这个类会在容器中创建对象;
        5、按需加载所有自动配置项
            非常多的starter;
            引入了哪些场景这个场景的自动配置才会开启;
            SpringBoot所有的自动配置功能都在 spring-boot-autoconfigure 包里面;
            自动配置也是按需加载;

    注：
        (1) 想要自动配置好Tomcat就需要引入Tomcat依赖，但是我们在依赖管理
            引入web场景的时候，就已经引入了Tomcat场景。
        (2) SpringMVC常用组件例如：
                前端控制器DispatcherServlet       拦截所有的前端的请求;
                字符编码characterEncodingFilter   解决返回中文字符串乱码问题;
                视图解析器viewResolver             对返回的视图进行渲染呈现;
                文件上传解析器multipartResolver    文件上传;
        (3) SpringBoot所有的自动配置都依赖 @EnableAutoConfiguration
    -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.3.4.RELEASE</version>
    </parent>

    <!--
    ● 开发导入starter场景启动器
    1、见到很多 spring-boot-starter-* ： *就代表某种场景
        注：某种场景如开发web项目的就是 spring-boot-starter-web，
            开发数据库jdbc的就是spring-boot-starter-data-jdbc，
            开发redis的就是 spring-boot-starter-data-redis
    2、只要引入starter，这个场景的所有常规需要的依赖都会自动引入
    3、SpringBoot所有支持的场景
        官方地址：
            https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter
    4、见到的 *-spring-boot-starter： 第三方提供的简化开发的场景启动器。
    5、所有场景启动器最底层的依赖
    -->
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>
        <!--简化JavaBean开发-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>
    </dependencies>



    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>2.3.4.RELEASE</version>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.springframework.boot</groupId>
                            <artifactId>spring-boot-configuration-processor</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>